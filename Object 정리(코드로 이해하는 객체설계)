https://www.compilejava.net/

우선 객체지향으로 원하는 코드를 짜는 구조부터 익혀야한다.


9p~13p
티켓 판매를 위해 객체지향으로 코드를 짰다

그러나 이는 큰 문제점이 봉착하였는데, 그것은 바로 Theater가 관람객의 가방과 판매원의 매표소에 직접 접근하기 때문이다.
무슨 말이냐면 청중 따로 판매원 따로 원하는 코드를 수정/작성할 때 Theater와 서로 연결되어있기에 함께 변경해야하기에
복잡하기도 하고 코드가 이해하기 어려운 아주 난감한 상태에 도달했다.

이러한 문제를 해결할려면, 자율성을 높여야한다.

18~32p
  
관람객이 스스로 가방 안 현금과 초대장을 처리하고 판매원이 스스로 매표소의 티켓과 판매 요금을 처리해야한다.
(Audience와 TicketSeller가 Bag과 TicketOffice를 처리해야한다.)
  
Theater enter메서드 & public class ticketSeller 코드에서 청중이 입장시 처리하는 코드 부분을 sellTo 메서드에 옮기면 된다.

그러면 TicketSeller 클래스에서 TicketOffice로 ticketOffice
sellTo메서드에서 입장시 관람객이 스스로 처리하며 TicketManager객체를 만들때 TicketOffice객체를 인스턴스 변수에 저장하여
나중에 다시 호출할 때 ticketOffice로 호출한다.

Audience 클래스도 개선을 해야 할 필요는 있다.

청중이 가지고 있는 가방안의 내용물을 직접 처리하고 가방은 그 내용물을 가지고 있다.
그러나, 가방은 그저 보관의 용도일 뿐 직접 처리하지 않는 수동적인 존재이기에 Bag도 캡슐화를 한다.

--------------------------------------------------------------------------------------
클래스 구현하기

43~45p

public과 private로 클래스는 드러내며 클래스 내부 객체 속성값을 해당 메서드로만 변경 가능하도록 만든다.
정보은닉과 무분별함으로 인한 식별 불가능을 막기 위함이다.

51p 추상클래스

추상클래스는 실체클래스의 공통적인 부분을 추출해서 선언한 클래스
추상클래스는 객체를 생성할 수 없다.
추상클래스와 실체클래스는 상속관계이다.

자세한 설명은
https://limkydev.tistory.com/188

52p
TEMPLATE METHOD패턴


61p

상속은 메서드나 인스턴스 변수를 재사용한다기보다는
부모 클래스가 가지고 있는 모든 인터페이스를 자식 클래스가 물려받는 구조를 가지기에 가치가 있다

자식 클래스가 부모 클래스를 대신하는 것을 업캐스팅이라고 한다.



81p

책임 할당-
객체에게 도움을 요청하는 것이다.

예매하라라는 책임이 있다고 치자.
ex) 1.예매하라.
그렇다면 예매를 하기위해 시간,기본 요금 등에 대한 정보를 소유하고 있는 전문가를 찾아야한다. 누구인가?
Screening이다.

ex) 1.예매하라 -> Screening

그렇다면 Screening에게는 정보를 소유하고 있을 뿐 아니라 해당 행동을 도와줄 객체가 필요하다. 누구인가?
Movie다.

ex) 1.예매하라 -> Screening-> Movie

이런 식으로 
1. 해당 행동에 대해 먼저 생각한다.
2. 그 다음 해당 행동을 해결하기 위해 어떤 객체가 적격인지 생각한다.
3. 그리고 그 다음 객체가 어떤 행동을 할 때 어떤 객체가 적격인지 생각한다.
이 행동을 반복하는 것이 객체의 책임을 결정하고 그 객체가 문제를 직접 해결하게하는 자율적 객체를 만든다.

113p
캡슐화

캡슐화는 객체지향에서 객체의 상태를 외부에서 변경하지 못하게 막는 개념이다.

여기서 
