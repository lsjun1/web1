26p 역할과 책임

-객체지향에서 중요한 개념

역할, 책임, 협력 3가지로 상호작용을 한다.

-객체 메시지 메서드에 대한 개념

객체: 상태를 가지고 행동을 할 수 있는 자율적인 존재
ex)손님은 이름,나이(상태)를 가지고 주문한다(행동)을 하기에 객체다.
자동차도 속도,연료량(상태)를 가지고 움직인다(행동)을 하기에 객체다.

메시지: 손님이 캐시어(주문받는사람)에게 메뉴 주문 한 것

메서드: 메시지를 받으면(바리스타가) 요청에 맞는 행동을 실행하는 것

객체는 적당히 협력적이며 적당히 자율적이여야한다.
모든 것을 할려고한다면 코드가 복잡하고 요청에 맞게 판단하게 만들어야 하기 때문

즉, 스스로 판단하는 "자율성" 다른 객체와 주고받는 "협력성"이 중요함.

객체지향의 중심은 객체지 클래스의 구조와 메서드가 아니다.
->객체의 역할 책임 협력에 집중해라. 근본적 구조가 중요하다.

2025/04/28

41p

객체란 구별할 수 있는 것이며, 상태,행동,식별자를 가지고 있다.
ex) 달력이라던가 옆에 있는 오브젝트 책이라던가...

52p

상태

상태는 주어지는 것이고
상태를 알면 현재를 기준으로 결과를 알 수 있다.

예시로 책 속의 내용을 들자면
키와 문만 알면 키보다 문이 크거나 문보다 키가 작으면 통과되니
복잡하게 이전의 기억(버섯,케이크 먹음)을 알 필요도 없으니 효율적이다.

간단하게 말하자면 상태(몸무게,키)가 아니라 행동(먹음)에 대해 먼저 고민하라는것.

-프로퍼티 & 프로퍼티 값

객체의 상태를 구성하는 모든 특징을 프로퍼티라고 한다.
프로퍼티는 변경되지 않아 정적이며,
프로퍼티 값은 시간에 따라 변경되기에 동적이다.

-링크
객체와 객체의 의미 있는 연결
ex)위치가 통로일때는 음료와 관련 있지만 정원일때는 관련이 없다.

-속성
객체를 구성하는 단순한 값을 속성이라고 한다.
ex)키나 몸무게 

54p
-행동
행동은 객체가 협력에 참여할 수 있는 유일한 방법이며, 
자신의 상태를 변경하거나 다른 객체에게 메시지를 전달함.

-캡슐화
겉보기만 보이게하고 오직 객체 내부에서만 자율적으로 판단하도록 만든것

-협력
다른 객체와 협력하는 유일한 방법은 요청이고

-쿼리와 명령
쿼리: 객체의 상태를 조회하는 것
명령: 객체의 상태를 변경하는 것

인터페이스에서 쿼리와 명령으로만 객체에 접근가능하다.

-번외:은유와 객체

객체지향은 현실 세계를 모방,추상화 하지않고
현실보다 더 자유로울 수도 있다.
현실을 닮은 새로운 세계를 창조하는 것이라고 생각하면 된다?
비슷하지만 동일하지 않다는 소리인것 같은데..

2025/04/29

73p
-추상화

추상화 사례 1.
헤리 벡의 지하철 노선도처럼
불필요한 지형지물이 아닌 필요한 목적에 대한 정보만을 제공하여
좋은 결과를 이끌어낼 수 있다.

이 것을 추상화라고 한다.

추상화 사례2.
왕,퀸,병정 등을 트럼프라고 묶고
토끼는 토끼라고 묶은 것 처럼 공통점만을 묶은 것도 역시 추상화의 일종이다.

공통점만 엮고 차이점 버려서 복잡한 걸 단순하게 만든게 추상화다.

84p
공통점 만을 묶은 것을 분류라고 한다.

89p
-타입
객체를 분류하는 기준이며
타입을 나누는 기준은 객체가 수행하는 행동이다.(105p)

개념과 타입은 동일하며, 객체는 개념의 인스턴스다.

해석하자면

개념과 타입은 동일하다는 것은 말 그대로 공통점만 모은것은 개념이고
개념과 타입은 똑같다는 건 어려울 것 없이 말 그대로 이해하면 된다.

상태와 행동을 가진 주체는(객체) 공통점만 모은것의(개념) 실제 구현(인스턴스)이다.

class cat이라는 cat이라는 개념에
new cat()으로 실제 고양이를 데이터에 넣은 것 
이것이 개념의 인스턴스라는 거다.


객체의 타입은 행동에 따라 결정되며, 데이터는 기준이 아니다.

93p
-다형성
동일한 요청에 대해 다른 방식으로 응답하는 것

-캡슐화
겉보기만 보이고 속에 어떤 내용인지 감추는 것

103p
-타입은 정적 모델, 객체는 동적 모델로 구분해 고려해야 한다.

타입은 변하지 않는 특징을 가지고 있고
객체는 상태가 변경되기에 이를 분명히 알고 숙지해야한다는 뜻인거 같다.

예시를 들자면,
class cat은 고양이라는 개념이고 고양이라는 개념은 바뀌지 않는다.
그러나 new cat()은 실제 고양이를 만들어낸거고 꼬리를 살랑거리고 야옹하고 운다.
그렇기에 상황에 따라 변경되기에 이를 숙지하라는 거다.

2025/04/30

107p
역할/책임/협력

113p
역할

재판에서 요청을 한 이유는 의무가 있기 때문이고,
의무를 받고 적절한 방식으로 응답을 해야한다.

117p
의무

책임은 정보와 서비스를 제공해야하는 것이며,
공용 인터페이스라는 것을 구성한다. 

책임

책임과 메시지의 수준은 같지 않은데,
책임을 결정 후 협력을 통해 요청을 할 때
하나의 책임이 여러 요청으로 분할되는 것이 일반적이기 때문이다.

즉 의무가 있고 그 의무는 여러가지의 요청으로 나뉘기에
책임과 요청은 다르다는 것이다?

119p
역할

역할은 객체가 다른 객체로도 변경 될 수 있다.
판사는 여왕이 될 수도, 왕이 될 수도
증인이 앨리스과 될 수도, 토끼가 될 수도 있다는 것이다.

그러나, 모든 객체가 변경 될 수 있는 것이 아닌,
동일한 메시지(요청)을 이해할 수 있는 객체여야 한다.

이러한 역할의 개념을 알고 협력을 추상화하면
왕,토끼가 아닌 판사와 증인으로 나눠 인지 과부하를 줄여
왕,여왕 등이 판사라는 협력에 참여할 수 있기에
재사용성이 높아진다.

128p
흔한 오류

클래스와 클래스 간의 관계
그러니까 동물,인류 같이 나누는게 아니라
분류 내에 참여할 수 있는 객체가 중요한거고
객체가 어떤 책임과 역할을 수행하는지가 중요하다.

135p
디자인 패턴(그림 4.8참고)

COMPOSITE(컴포지트 패턴)

- Component
객체(복합객체 + 단일객체)들의 공통되는 메소드를 정의 (인터페이스)
다른 Component를 추가(add)하거나 제거, 자식을 반환하는 책임을 가지고 있음.

- Leaf
생성된 단일 객체(File)

- Composite
Leaf객체들로 이루어져 있으며(복합객체) 컴포넌트 내 명령들을 구현한다. 

- Client
Component 인터페이스를 사용해 복합체 구조 내의 객체들을 조작한다.

184p
-도메인 모델
도메인은 중요한 문제에 필요한 지식을 갖춘 역량이다.


193p
-유스케이프 구조
시스템과의 상호작용의 흐름을 "텍스트"로 정리한 것

특성으로는
1.텍스트다.
2.여러 시나리오의 집합
3. 피처(단순하게 나열)이 아니라 시스템 속 의사소통이 가능함.
