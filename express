https://codepen.io/axzekhmd-the-selector/pen/KKOPXPL
https://github.com/codespaces/templates
https://github.com/codespaces/templates

백
react

프
express/next.js
django/flask

express
https://www.inflearn.com/course/lecture?courseSlug=node-js-express&unitId=13878&tab=curriculum

next.js
https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%8A%94-%EB%84%A4%EC%8A%A4%ED%8A%B8-%EC%A0%9C%EC%9D%B4%EC%97%90%EC%8A%A4?attributionToken=lQHwlAoMCNeOzroGEMfcx50DEAEaJDY3N2UxYWMwLTAwMDAtMjc2ZC04M2ZiLTNjMjg2ZDQzMjE4ZSoHMTI4NDIwNzI4qOWqLcXL8xejgJcim9a3LcLwnhW2t4wtjr6dFdSynRWQ97IwmNa3LY6RyTCZ3dgwnN3YMJruxjA6DmRlZmF1bHRfc2VhcmNoSAFYAWABaAF6AnNp

프론트엔드 react------------------- 

jsx의 특징

props

class Codelab extends React.Component {
  render() {
    return (
      <div>
        <h1>Hello {this.props.name}</h1>
        <div>{this.props.children}</div>
      </div>
    );
  }
}

class App extends React.Component {
  render() {
    return (
      <Codelab name={this.props.name}>{this.props.children}</Codelab>
    );
  }
}

ReactDOM.render(
  <App name="velopert">i am your child</App>,
  document.getElementById('root')
);

https://cdnjs.cloudflare.com/ajax/libs/react/16.13.1/umd/react.production.min.js
https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.13.1/umd/react-dom.production.min.js
https://s3.amazonaws.com/shiitake/react-tooltip-lite.min.js

기본 값 설정
Component.defaultProps = {...}

propTypes 검증
props가 올바른 데이터 타입인지 아닌지 검증함.(잘못된 데이터 타입이면 경고를 줌)

import React from "https://esm.sh/react";
import ReactDOM from "https://esm.sh/react-dom";
import PropTypes from "https://esm.sh/prop-types"; // PropTypes 패키지 임포트

class Codelab extends React.Component {
  render() {
    return (
      <div>
        <h1>Hello {this.props.name}</h1>
        <div>{this.props.children}</div>
      </div>
    );
  }
}

Codelab.propTypes = {
  name: PropTypes.string,
  number: PropTypes.number.isRequired
};

Codelab.defaultProps = {
  name: 'Unknown'
};

class App extends React.Component {
  render() {
    return (
      <Codelab name={this.props.name}>{this.props.children}</Codelab>
    );
  }
}

ReactDOM.render(
  <App name="velopert">i am your child</App>,
  document.getElementById('root')
);

에서 

Codelab.defaultProps = {
  name: 'Unknown'
};는 name prop이 제공되지 않으면 Unkwon을 사용하도록 기본 값 설정했다.

Codelab.propTypes = { name: PropTypes.string, number: PropTypes.number.isRequired };는 name은 문자열이어야 하고, 
number는 반드시 숫자로 제공되어야 한다는 검증을 설정합니다.

number prop이 제공되지 않으면 경고가 발생함.

설명---------------------------------------------------------------------------------------
Codelab 컴포넌트에서 name값과 children값을 h1과 div에 출력한다.
App 컴포넌트에서는 Codelab 컴포넌트를 자식으로 포함하고 있고, Codelab에 name과 children값을 전달한다.

<Codelab name={this.props.name}>{this.props.children}</Codelab>에서
this.props.name은 App컴포넌트 name값을 Codelab 컴포넌트에 전달하고, 
this.props.children은 <App name=...... child</App>에 <App>태그 안 작성된 값("i am your child")를
Codelab으로 전달한다.

ReactDOM.render은 App컴포넌트를 DOM에 렌더링하는 코드이며,
App 컴포넌트에 name="velopert"와 자식 요소인 "i am your child"를 전달한다.
이 값들은 App -> Codelab컴포넌트로 전달된다.(name은 Codelab의 h1 태그에 출력, "i am your child"는 
Codelab의 div 태그에 출력됨.

state

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value:0
    };
    this.handleClick = this.handleClick.bind(this);
  }
  
  handleClick() {
    this.setState({
      value:this.state.value + 1
    });
  }
  
  render() {
    return (
      <div>
        <h2>{this.state.value}</h2>
        <button onClick={this.handleClick}>PressMe</button>
      </div>
    )
  }
}

class App extends React.Component {
  render() {
    return (
      <Counter/>
    );
  }
}

ReactDOM.render(
  <App></App>,
  document.getElementById("root") // 오타 수정 (getElementById)
);

버튼을 누르면 클릭수를 나타내는 프로그램이다.

근데 여기서

render() {
    return (
      <div>
        <h2>{this.state.value}</h2>
        <button onClick={this.handleClick}>PressMe</button>
      </div>
    )
  }
}
부분에서 {this.handleClick}을 {this.handleClick()}로 ()을 넣으면 문제가 생긴다.
이유는 class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value:0
    };
    this.handleClick = this.handleClick.bind(this);
  }
  
  handleClick() {
    this.setState({
      value:this.state.value + 1
    });
  }
  
  render() {
    return (
      <div>
        <h2>{this.state.value}</h2>
        <button onClick={this.handleClick}>PressMe</button>
      </div>
    )
  }
}

class App extends React.Component {
  render() {
    return (
      <Counter/>
    );
  }
}

ReactDOM.render(
  <App></App>,
  document.getElementById("root") // 오타 수정 (getElementById)
);

버튼을 누르면 클릭수를 나타내는 프로그램이다.

근데 여기서

render() {
    return (
      <div>
        <h2>{this.state.value}</h2>
        <button onClick={this.handleClick}>PressMe</button>
      </div>
    )
  }
}
부분에서 {this.handleClick}을 {this.handleClick()}로 ()을 넣으면 문제가 생긴다.
이유는 {this.handleClick}는 클릭할때만 참조하여 {this.handleClick()}을 실행하는 반면,
{this.handleClick()}로 처음부터 정한다면 실행되고 반환값이 없어서 문제가 생긴다.


컴포먼트 맵핑

앵귤러?
자바스크립트 맵은 배열 내 각 요소를 처리한다.

컨텍트를 만들 때 스테이트를 초기화?


class Contactinfo extends React.Component {
  render() {
    return (
      <div>
        {this.props.contact.name} - {this.props.contact.phone}
      </div>
    );
  }
}

class Contact extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      contactData: [
        { name: 'Abet', phone: '010-0000-0001' },
        { name: 'Betty', phone: '010-0000-0002' },
        { name: 'Charlie', phone: '010-0000-0003' },
        { name: 'David', phone: '010-0000-0004' }
      ]
    };
  }

  render() {
    const mapToComponent = (data) => {
      return data.map((contact, i) => {
        return <Contactinfo contact={contact} key={i} />;
      });
    };

    return <div>{mapToComponent(this.state.contactData)}</div>;
  }
}

class App extends React.Component {
  render() {
    return (
     <Contact/>
    );
  }
};

ReactDOM.render(
<App></App>,
document.getElementByld("root")
);

node.js---------------------------
https://www.inflearn.com/course/do-it-nodejs-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8

const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})


