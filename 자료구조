typedef struct node와 struct node의 차이점.

typedef를 작성하면 나중에 "node s1로 입력가능함" 즉 요약가능
typedef 없이 그냥 struct node를 작성 시 "struct node s1로 입력해야 함". 즉 struct을 추가해야 함.

malloc(sizeof(Node))
에서 malloc(sizeof)는 동적 메모리 할당 함수
sizeof(Node)는 Node구조체가 차지하는 메모리 크기 계산

malloc(sizeof(Node))는 Node 구조체 크기만큼 메모리를 동적으로 할당하고, 그 메모리의 주소를 반환함.

malloc()함수는 기본적으로 모든 타입의 포인터를 반환하기에 필요한 타입으로 casting 변환 해야 함.

무슨 말이냐?면
void *malloc(sizeof(Node))

여기서 void *는 모든 타입의 포인터로 변환 가능함을 만들어줌.
근데 문제는 어떤 타입인지 정확하게 지정해야 올바른 데이터 타입으로 사용가능함.

그래서 Node *ptr = (Node *)malloc(sizeof(Node));
(Node *)를 이용해서 void *를 Node *로 변환해서 어떤 타입인지 명확하게 지정한거임.
명확하게 지정함으로써 ptr은 Node 구조체의 포인터가 되어 ->연산자로 Node에 접근 가능함.

void * -> Node *로 변환하는 과정이 (casting)형 변환이다.

즉 malloc(sizeof(Node))가 반환한 void *를 Node *로 변환하여 구조체 포인터에 저장함.


Node *head = (Node *)malloc(sizeof(Node));

코드 동작 과정:

sizeof(Node) → Node 구조체의 크기(예: 8바이트) 계산.
malloc(sizeof(Node)) → Node 크기만큼 메모리 할당, 메모리 주소 반환 (void * 타입).
(Node *)malloc(sizeof(Node)) → 반환된 주소를 Node * 타입으로 변환.
head에 할당된 메모리 주소 저장.
→ 즉, head가 새로 할당된 Node 구조체의 시작 주소를 가리킴.
