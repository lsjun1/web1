----------------------------------------------------------------------------------------------
typedef struct node와 struct node의 차이점.

typedef를 작성하면 나중에 "node s1로 입력가능함" 즉 요약가능
typedef 없이 그냥 struct node를 작성 시 "struct node s1로 입력해야 함". 즉 struct을 추가해야 함.
----------------------------------------------------------------------------------------------

malloc(sizeof(Node))에서

malloc(sizeof)는 동적 메모리 할당 함수
sizeof(Node)는 Node구조체가 차지하는 메모리 크기 계산

malloc(sizeof(Node))는 Node 구조체 크기만큼 메모리를 동적으로 할당하고, 그 메모리의 주소를 반환함.

malloc()함수는 기본적으로 모든 타입의 포인터를 반환하기에 필요한 타입으로 casting 변환 해야 함.

무슨 말이냐?면
void *malloc(sizeof(Node))을 보자.

여기서 void *는 모든 타입의 포인터로 변환 가능함을 만들어줌.
근데 문제는 어떤 타입인지 정확하게 지정해야 올바른 데이터 타입으로 사용가능함.

그래서 Node *ptr = (Node *)malloc(sizeof(Node));
(Node *)를 이용해서 void *를 Node *로 변환해서 어떤 타입인지 명확하게 지정한거임.
명확하게 지정함으로써 ptr은 Node 구조체의 포인터가 되어 ->연산자로 Node에 접근 가능함.

void * -> Node *로 변환하는 과정이 (casting)형 변환이다.

즉 malloc(sizeof(Node))가 반환한 void *를 Node *로 변환하여 구조체 포인터에 저장함.


Node *head = (Node *)malloc(sizeof(Node));

코드 동작 과정:

sizeof(Node) → Node 구조체의 크기(예: 8바이트) 계산.
malloc(sizeof(Node)) → Node 크기만큼 메모리 할당, 메모리 주소 반환 (void * 타입).
(Node *)malloc(sizeof(Node)) → 반환된 주소를 Node * 타입으로 변환.
head에 할당된 메모리 주소 저장.
→ 즉, head가 새로 할당된 Node 구조체의 시작 주소를 가리킴.
----------------------------------------------------------------------------------------------

정적 메모리 vs 동적 메모리

정적 메모리 할당은 프로그램 실행 전에 메모리 크기 고정, 스택 또는 데이터 영역에 저장됨.
예시: arr[5]에서 arr[6]은 접근 못함. 메모리 크기가 고정되어있기에.
static int count같은 경우는 데이터 영역에 저장되어 함수가 끝나도 값이 유지됨.

동적 메모리 할당은 실행 중 메모리를 할당할 수 있음.
할당된 메모리는 반드시 free()를 통해 해제해야함.
만일 그렇지 않으면 메모리 누수 발생.

동적 메모리할당에서 malloc과 realloc의 차이점

malloc은 새로운 메모리 공간을 할당하고 할당된 공간은 초기화하지 않으며 기존 데이터가 없음.
realloc은 기존 메모리 크기를 조절할 때 사용하며 기존 데이터를 유지하지만 새로운 위치로 이동할 수도 있음.
데이터를 유지할려면 기존 포인터를 덮어 쓰는 방식으로 이용해야 함.


이렇게 구조체에서 typedef의 차이점과 동적 메모리할당과 정적 메모리할당에 대해 알아왔다.
----------------------------------------------------------------------------------------------
자, 이제 시작이다.
배열과 연결리스트를 통한 스택,큐,덱을 전부 익히고

더 나아가서 이중순회를 통한 트리와 

배열과 연결리스트를 통한 자료구조를 이해해보자.

백준 자료구조 문제 모음집

https://velog.io/@kjmq1234/%EB%B0%B1%EC%A4%80-%EB%8B%A8%EA%B3%84%EB%B3%84%EB%A1%9C-%ED%92%80%EA%B8%B0-%EC%8A%A4%ED%83%9D-C%EC%96%B8%EC%96%B4-%ED%92%80%EC%9D%B428278-10773-9012-4949-12789
https://www.acmicpc.net/step/11
https://www.acmicpc.net/workbook/view/1504

배열을 통한 스택
https://velog.io/@kimmainsain/C%EC%96%B8%EC%96%B4-%EB%B0%B1%EC%A4%80-10828-%EC%8A%A4%ED%83%9D
https://t-okk.tistory.com/109
https://henrynoh.tistory.com/12
https://zero0205.tistory.com/599


연결리스트를 통한 스택
https://sedangdang.tistory.com/25
https://bunnnybin.tistory.com/entry/%EB%B0%B1%EC%A4%80-10828-%EC%8A%A4%ED%83%9D-C-C
https://codename-bobo.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D-ADT-%EC%8A%A4%ED%83%9D-%EA%B0%9C%EB%85%90-%EB%B0%B0%EC%97%B4-%EC%8A%A4%ED%83%9D-%EA%B5%AC%ED%98%84-%EB%B0%B1%EC%A4%80-10828%EB%B2%88
https://codejin.tistory.com/95


프린터 큐

회전 큐

배열 큐
https://velog.io/@shinhs9902/%EB%B0%B1%EC%A4%80-10845%EB%B2%88
https://all4null.tistory.com/46  원형큐
https://m.blog.naver.com/kodewithamy/221774355689
https://mu7a7ion.tistory.com/26 
https://khj0426.tistory.com/6 연결리스트
https://chaarlie.tistory.com/46

배열을 통한 덱




