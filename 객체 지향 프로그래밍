https://wikidocs.net/281
https://www.tcpschool.com/java/java_collectionFramework_concept


https://www.compilejava.net/

https://limesparkling.tistory.com/17
공부방법: 객제지향 완벽 이해 -> object string,stringbuffer 공부(자바 API 클래스) TCP에 있음.
        ->컬렉션 프레임 웍 완벽 이해 -> 입출력 공부 ->(선택)안드로이드 공부 할거면 AWT/Thread 공부


현재 공부 상황: 클래스,객체,필드,메서드,this 등을 공부함,


메서드-

class 클래스명 {
    데이터타입 필드명; // 필드명: 클래스의 필드

    // 인스턴스 메서드: 필드에 값을 설정
    public void 메서드이름(데이터타입 필드명) { // "메서드이름(데이터타입 필드명)"가 메서드다.

    메서드 이름은 setName을 추천하며
    (데이터타입 필드명)에서 필드명이 매개변수다.

        this.필드명 = 필드명; 
    
    this는 객체를 가리키며 객체의 필드와 메서드 참조하게 만듦
    this.필드명:클래스의 필드를 가리키며 객체의 속성에 접근할 때 사용
    필드명: 클래스의 속성을 나타내는 변수 객체 특성 저장
    }

    // 인스턴스 메서드: 필드 값을 반환
    public 데이터타입 메서드이름() { //getField 추천
        return 필드명; // 필드 반환
    }

    public static void main(String[] args) {
        클래스명 객체 = new 클래스명(); // 객체 생성
        객체.setField(값); // 필드에 값 할당 (값을 실제 데이터로 변경)
        System.out.println(객체.getField()); // 필드 값 출력
    }
}

-------------------------------------------------------------
class Person {
    String name; // 필드

    // 인스턴스 메서드: 필드에 값을 설정
    public void setName(String name) {
        this.name = name; // 필드에 매개변수 할당
    }

    // 인스턴스 메서드: 필드 값을 반환
    public String getName() {
        return name; // 필드 반환
    }

    public static void main(String[] args) {
        Person person = new Person(); // 객체 생성
        person.setName("Alice"); // 필드에 값 할당
        System.out.println(person.getName()); // 필드 값 출력 (출력: Alice)
    }
}

-----------------------------------------------------------------------------
자바 객체지향프로그래밍 메서드 과정

this.name = name;은 매개변수 값을 name 필드에 복사하는 작업입니다.
person.setName("Alice"); 호출로 인해 "Alice"가 매개변수 name에 전달되며, 
이후에 이 값이 person 객체의 name 필드에 저장됩니다.

1.setName(String name)이라는 메서드를 만들어서 구조를 획일화, 변수값을 직접 설정을 막음.
2.this.name = name;으로 매개변수값을 변수/필드에 할당함.
3.person.setName("Alice");는 메서드 호출로 setName메서드에 있는 name에 Alice라는 값을 전달함.
그리고 그 전달값을 변수/필드값에 할당함.

4.그렇게 매개변수값에 Alice값이 변수/필드에 값으로 할당이 되었고 
그 뒤 System.out.println(person.getName());으로 필드값을 출력함.

드디어 이해한듯..

그 외에 메서드----------------------
return 사용법:

public class Sample {
    void sayNick(String nick) {
        if ("바보".equals(nick)) {
            return;
        }
        System.out.println("나의 별명은 "+nick+" 입니다.");
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        sample.sayNick("야호");
        sample.sayNick("바보");  // 출력되지 않는다.
    }
}

return;으로 하게 된다면, 바보가 출력되지 않는다.

메서드 내 변수 효력 범위-------------------------
public class Sample {
    void varTest(int a) {
        a++;
    }

    public static void main(String[] args) {
        int a = 1;
        Sample sample = new Sample();
        sample.varTest(a);
        System.out.println(a);
    }
}

1. main메서드에서 a에 1을 대입함.
2. varTest메서드를 입력해서 a를 주어 호출?
3.a의 값을 출력

2가 아닌 1이 출력된 이유는

void varTest(int a) {
        a++;
}

해당 메서드가 메서드 안에서만 쓰이기에 다른 메서드의 값에 영향을 주지 않는다.

그렇다면 다른 메서드의 값에 영향을 주는 경우는 총 2가지로

1.
a = sample.varTest(a);로 호출시키면 된다.

2.
sample.a++;
sample.a=1;로 변수a를 sample클래스의 객체 변수로 선언해서 해당 객체를 1만큼 증가시키고
main 메서드에서 varTest메서드를 호출하면 Sample 클래스의 sample을 전달하도록 수정했다.



값에 의한 호출---------------
class Updater {
    void update(Counter counter) { //int count
        counter.count++; //count++;
    }
}

class Counter {
    int count = 0;
}

public class Sample {
    public static void main(String[] args) {
        Counter myCounter = new Counter();
        System.out.println("before update:"+myCounter.count);
        Updater myUpdater = new Updater();
        myUpdater.update(myCounter);
        System.out.println("after update:"+myCounter.count);
    }
}

설명: 
int count = count(count++)이라고 가정해보자.

1. 오른쪽 count++이 값을 복사한다. 이때 값이0이면 0을 복사하고,
++을 하므로 복사된 값은 1로 증가한다.

2. 그러나 1로 증가한 값을 전달하는게 아닌 0을 우선적으로 전달하기에 
count(++)로 0을 복사하고 왼쪽 int count에 0을 전달하고 count(++)이 0에서 1로 복사한 값이 증가한다.

결론: 최종적으로 count++이 0을 복사하여 왼쪽의 int count에 0이 전달되고, 
오른쪽의 count는 그 이후 0에서 1로 증가된 것이다.

상속----------------------------
class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Dog extends Animal { //Animal에 있는 클래스를 Dog 클래스에 그대로 사용하게 만듦.
                          // + 만약 상속을 사용하지 않는다면 Dog 클래스와 필드 메소드를 다시 만들어야 함.
    void sleep() {
        System.out.println(this.name+" zzz");
    }
}

public class Sample {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.setName("poppy");
        System.out.println(dog.name);
        dog.sleep();
    }
}

해석: 
dog.setName("poppy")는 Animal 클래스에서 상속받은 setName 메서드를 호출합니다.
이 메서드가 호출되면, this.name = "poppy"로 설정됩니다.
여기서 **this.name**은 Dog 클래스가 상속받은 Animal 클래스의 name 필드를 의미합니다.
따라서 dog 객체의 name 필드에 "poppy"가 저장됩니다.


메서드 오버라이징 및 상속--------------------------------------
class Dog {
    void sleep() {
        System.out.println("강아지가 잠을 잡니다.");
    }
}

class HouseDog extends Dog {
    // sleep() 오버라이딩을 하지 않음
}

public class Sample {
    public static void main(String[] args) {
        HouseDog houseDog = new HouseDog();
        houseDog.sleep();  // "강아지가 잠을 잡니다." 출력
    }
}

Dog 클래스에서 sleep()으로 메서드를 만든 상태다.
그리고 class Dog extends Animal {으로 Animal클래스에 있는걸 Dog 클래스에 그대로 이용할 수 있게 "상속"을 사용하였다.
그렇기에 현재 Dog클래스에서 HouseDog클래스로 sleep()매서드가 옮겨진 상태이며,
HouseDog클래스에서 sleep()매서드를 자기자신만의 방식으로 다시 정의하는 방식이 오버라이징인 상태인것이다.

번외: @Override에 대해

public class Animal {
    public void sound() {
        System.out.println("Animal sound");
    }
}

public class Dog extends Animal {
    @Override
    public void sound() {
        System.out.println("멍멍!");
    }
}

위 코드는 Animal 클래스가 sound()메소드를 가지고 있고 Dog 클래스가 Animal 클래스를 상속하고 있으니까
Animal 클래스가 부모 Dog 클래스가 자식 클래스다.

여기서 중요한 점은 자식 클래스인 Dog 클래스에서 Animal 클래스의 메소드인 sound()를 다시 println해서 재정의 하고 있기에,
@Override로 자식 클래스에서 부모 클래스의 메소드를 재정의 하고 있으면 사용하는 걸 의미한다.

생성자-------------------------------------------------------------------------------------

생성자 오버로딩 : 생성자를 다른 데이터 타입, 다른 입력값 등으로 여러개의 생성자를 만드는 것

class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Dog extends Animal {
    void sleep() {
        System.out.println(this.name + " zzz");
    }
}

class HouseDog extends Dog {
    HouseDog(String name) {
        this.setName(name);
    }

    HouseDog(int type) {
        if(type == 1) {
            this.setName("yorkshire");
        }

        else if(type == 2) {
            this.setName("bulldog");
        }
    }

    void sleep() {
        System.out.println(this.name + " zzz in house");
    }

    void sleep(int hour) {
        System.out.println(this.name + " zzz in house for" + hour + "hours");
    }
}

public class Sample {
    public static void main(String[] args) {
        HouseDog happy = new HouseDog("happy");
        HouseDog yorkshire = new HouseDog(1);
        System.out.println(happy.name);
        System.out.println(yorkshire.name);
    }
}

위의 코드는 HouseDog 메서드를 2가지로 만들었다.

하나는 String 자료형으로 입력하는 생성자
다른 하나는 int자료형을 입력으로 받는 생성자로 다른 생성자를 여러 개 만드는 것이 바로 생성자 오버로딩이다.(메서드 오버로딩과 동일함)

인터페이스 & 다형성---------------------------------------------------------------------------------
뭔지 몰라서 일단 패스함.



컬렉션 프레임 워크---------------------------------
