https://wikidocs.net/281

https://www.tcpschool.com/java/java_collectionFramework_concept

2003090019682 

https://www.compilejava.net/

https://limesparkling.tistory.com/17
공부방법: 객제지향 완벽 이해 -> object string,stringbuffer 공부(자바 API 클래스) TCP에 있음.
        ->컬렉션 프레임 웍 완벽 이해 -> 입출력 공부 ->(선택)안드로이드 공부 할거면 AWT/Thread 공부

참조 자료형 변수
Person person;를 참조 자료형 변수라고 한다.
int num;은 기본 자료형 변수라고 한다.

인스턴스란 new로 만들어진 객체다.

------------------------------------
멤버 변수,인스턴스 변수,정적 변수

멤버 변수란?
클래스 내에서 선언된 변수며,
멤버 변수에는 인스턴스 변수, 정적 변수로 나뉜다.

------------------------------------
ex)
멤버 변수

class Person {
    String name; // 인스턴스 변수
    int age; // 인스턴스 변수
    String sex; // 인스턴스 변수
    static string nationality = “korea”; // 정적 변수
}
------------------------------------
인스턴스 변수

생성 후에 접근 가능한 변수며 
인스턴스가 소멸하면 인스턴스 변수도 소멸된다.

Person person1 = new Person();
person1.name = "록카";
person1.sex = "female";

------------------------------------
정적변수(클래스 변수)

인스턴스를 생성하지 않아도 접근 가능한 변수

String nation = Person.nationality;

------------------------------------
객체의 합성

class Car {
    Engine engine;  // Car 객체는 Engine 객체를 포함

    // 생성자에서 Car 객체에 Engine 객체를 포함시킴
    Car() {
        this.engine = new Engine();
    }

클래스------------------------------------

class Animal {
}

public class Sample {
        public static void main(String[] args) {
         Animal cat = new Animal();        
        }
}

new:객체 생성 키워드
cat은 객체이면서 Animal의 인스턴스이다.
인스턴스는 특정 객체가 어떤 클래스의 객체인지를 설명하는것이다.
즉 cat이 Animal의 객체라는 것을 설명하고 있는것이다.


class Animal {
    String name; //인스턴스 변수

    public void setName(String name) { //매개변수
        this.name = name;
    }
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("body"); // body는 매개변수
        
        Animal dog = new Animal();
        dog.setName("happy");
    }
}

this.name = name에 대해 설명해보자. 
우선 cat.setName("body")에서 입력값으로 setName메서드를 호출했기에 
setName의 내부에 선언된 this는 cat을 가리킨다.

class Animal {
    String name;
에 String name은 클래스의 인스턴스 변수고

setName(String name)
에 String name은 매개변수 name이다.

그리고 this.name = name에서 this는 현재 객체를 가리키면 this.name = name;구문에서
좌측의 this.name은 현재 객체의 name 필드를 
우측의 name은 메서드나 생성자의 매개변수다.

+ 
추가적으로 객체 변수는 공유되지 않는다는 점을 살펴보자.

class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("boby");

        Animal dog = new Animal();
        dog.setName("happy");
    }
}

이 문장에서 cat은 body dog은 happy가 출력되어서
cat.name = "boby";
dog.name = "happy";가 출력될 것이다. 

근데 this(객체).name = name(메서드호출)을 보자면,
dog.name="happy"가 나중에 출력되므로 cat.name="happy"라는 값으로 body가 happy로 변경되는가?
this.name = name을 보면 name(메서드호출,매개변수)가 동일한데 그럼 이 값이 변경되지 않을까?
그러나 실제로 출력해보면 body와 happy만 출력되는 점이 바로 객체 변수 값이 독립적으로 유지된다라는 걸 확인한다.


메서드-

class 클래스명 {
    데이터타입 필드명; // 필드명: 클래스의 필드

    // 인스턴스 메서드: 필드에 값을 설정
    public void 메서드이름(데이터타입 필드명) { // "메서드이름(데이터타입 필드명)"가 메서드다.

    메서드 이름은 setName을 추천하며
    (데이터타입 필드명)에서 필드명이 매개변수다.

        this.필드명 = 필드명; 
    
    this는 객체를 가리키며 객체의 필드와 메서드 참조하게 만듦
    this.필드명:클래스의 필드를 가리키며 객체의 속성에 접근할 때 사용
    필드명: 클래스의 속성을 나타내는 변수 객체 특성 저장
    }

    // 인스턴스 메서드: 필드 값을 반환
    public 데이터타입 메서드이름() { //getField 추천
        return 필드명; // 필드 반환
    }

    public static void main(String[] args) {
        클래스명 객체 = new 클래스명(); // 객체 생성
        객체.setField(값); // 필드에 값 할당 (값을 실제 데이터로 변경)
        System.out.println(객체.getField()); // 필드 값 출력
    }
}

-------------------------------------------------------------
class Person {
    String name; // 필드

    // 인스턴스 메서드: 필드에 값을 설정
    public void setName(String name) {
        this.name = name; // 필드에 매개변수 할당
    }

    // 인스턴스 메서드: 필드 값을 반환
    public String getName() {
        return name; // 필드 반환
    }

    public static void main(String[] args) {
        Person person = new Person(); // 객체 생성
        person.setName("Alice"); // 필드에 값 할당
        System.out.println(person.getName()); // 필드 값 출력 (출력: Alice)
    }
}

-----------------------------------------------------------------------------
자바 객체지향프로그래밍 메서드 과정

this.name = name;은 매개변수 값을 name 필드에 복사하는 작업입니다.
person.setName("Alice"); 호출로 인해 "Alice"가 매개변수 name에 전달되며, 
이후에 이 값이 person 객체의 name 필드에 저장됩니다.

1.setName(String name)이라는 메서드를 만들어서 구조를 획일화, 변수값을 직접 설정을 막음.

2.this.name = name;으로 매개변수값을 변수/필드에 할당함.
this.name(객체의 필드) = name(매개변수);

3.person.setName("Alice");는 메서드 호출로 setName메서드에 있는 name에 Alice라는 값을 전달함.
그리고 그 전달값을 변수/필드값에 할당함.

4.그렇게 매개변수값에 Alice값이 변수/필드에 값으로 할당이 되었고 
그 뒤 System.out.println(person.getName());으로 필드값을 출력함.

드디어 이해한듯..

그 외에 메서드----------------------
return 사용법:

public class Sample {
    void sayNick(String nick) {
        if ("바보".equals(nick)) {
            return;
        }
        System.out.println("나의 별명은 "+nick+" 입니다.");
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        sample.sayNick("야호");
        sample.sayNick("바보");  // 출력되지 않는다.
    }
}

return;으로 하게 된다면, 바보가 출력되지 않는다.

메서드 내 변수 효력 범위-------------------------
public class Sample {
    void varTest(int a) {
        a++;
    }

    public static void main(String[] args) {
        int a = 1;
        Sample sample = new Sample();
        sample.varTest(a);
        System.out.println(a);
    }
}

1. main메서드에서 a에 1을 대입함.
2. varTest메서드를 입력해서 a를 주어 호출?
3.a의 값을 출력

2가 아닌 1이 출력된 이유는

void varTest(int a) {
        a++;
}

해당 메서드가 메서드 안에서만 쓰이기에 다른 메서드의 값에 영향을 주지 않는다.

그렇다면 다른 메서드의 값에 영향을 주는 경우는 총 2가지로

1.
a = sample.varTest(a);로 호출시키면 된다.

2.
sample.a++;
sample.a=1;로 변수a를 sample클래스의 객체 변수로 선언해서 해당 객체를 1만큼 증가시키고
main 메서드에서 varTest메서드를 호출하면 Sample 클래스의 sample을 전달하도록 수정했다.



값에 의한 호출---------------

class Updater {
    void update(Counter counter) { // Counter 객체를 매개변수로 받음
        counter.count++; // Counter 객체의 count 필드를 증가시킴
    }
}

class Counter {
    int count = 0; // count 변수 초기화
}

public class Sample {
    public static void main(String[] args) {
        Counter myCounter = new Counter(); // Counter 객체 생성
        System.out.println("before update:" + myCounter.count); // 0 출력
        Updater myUpdater = new Updater(); // Updater 객체 생성
        myUpdater.update(myCounter); // Counter 객체를 전달하여 update 메서드 호출
        System.out.println("after update:" + myCounter.count); // 1 출력
    }
}

설명: 
int count = count(count++)이라고 가정해보자.

1. 오른쪽 count++이 값을 복사한다. 이때 값이0이면 0을 복사하고,
++을 하므로 복사된 값은 1로 증가한다.

2. 그러나 1로 증가한 값을 전달하는게 아닌 0을 우선적으로 전달하기에 
count(++)로 0을 복사하고 왼쪽 int count에 0을 전달하고 count(++)이 0에서 1로 복사한 값이 증가한다.

결론: 최종적으로 count++이 0을 복사하여 왼쪽의 int count에 0이 전달되고, 
오른쪽의 count는 그 이후 0에서 1로 증가된 것이다.

값에 의한 호출 vs 참조에 의한 호출







상속----------------------------
class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Dog extends Animal { //Animal에 있는 클래스를 Dog 클래스에 그대로 사용하게 만듦.
                          // + 만약 상속을 사용하지 않는다면 Dog 클래스와 필드 메소드를 다시 만들어야 함.
    void sleep() {
        System.out.println(this.name+" zzz");
    }
}

public class Sample {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.setName("poppy");
        System.out.println(dog.name);
        dog.sleep();
    }
}

해석: 
dog.setName("poppy")는 Animal 클래스에서 상속받은 setName 메서드를 호출합니다.
이 메서드가 호출되면, this.name = "poppy"로 설정됩니다.
여기서 **this.name**은 Dog 클래스가 상속받은 Animal 클래스의 name 필드를 의미합니다.
따라서 dog 객체의 name 필드에 "poppy"가 저장됩니다.


메서드 오버라이징 및 상속--------------------------------------
class Dog {
    void sleep() {
        System.out.println("강아지가 잠을 잡니다.");
    }
}

class HouseDog extends Dog {
    // sleep() 오버라이딩을 하지 않음
}

public class Sample {
    public static void main(String[] args) {
        HouseDog houseDog = new HouseDog();
        houseDog.sleep();  // "강아지가 잠을 잡니다." 출력
    }
}

Dog 클래스에서 sleep()으로 메서드를 만든 상태다.
그리고 class Dog extends Animal {으로 Animal클래스에 있는걸 Dog 클래스에 그대로 이용할 수 있게 "상속"을 사용하였다.
그렇기에 현재 Dog클래스에서 HouseDog클래스로 sleep()매서드가 옮겨진 상태이며,
HouseDog클래스에서 sleep()매서드를 자기자신만의 방식으로 다시 정의하는 방식이 오버라이징인 상태인것이다.

번외: @Override에 대해

public class Animal {
    public void sound() {
        System.out.println("Animal sound");
    }
}

public class Dog extends Animal {
    @Override
    public void sound() {
        System.out.println("멍멍!");
    }
}

위 코드는 Animal 클래스가 sound()메소드를 가지고 있고 Dog 클래스가 Animal 클래스를 상속하고 있으니까
Animal 클래스가 부모 Dog 클래스가 자식 클래스다.

여기서 중요한 점은 자식 클래스인 Dog 클래스에서 Animal 클래스의 메소드인 sound()를 다시 println해서 재정의 하고 있기에,
@Override로 자식 클래스에서 부모 클래스의 메소드를 재정의 하고 있으면 사용하는 걸 의미한다.

생성자---------------------------------------------------------------------------------------------------------------

생성자
객체의 초기값을 위해 만들어진 틀
ex) Person(String name, int age)

생성자 오버로딩 : 생성자를 다른 데이터 타입, 다른 입력값 등으로 여러개의 생성자를 만드는 것

class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Dog extends Animal {
    void sleep() {
        System.out.println(this.name + " zzz");
    }
}

class HouseDog extends Dog {
    HouseDog(String name) {
        this.setName(name);
    }

    HouseDog(int type) {
        if(type == 1) {
            this.setName("yorkshire");
        }

        else if(type == 2) {
            this.setName("bulldog");
        }
    }

    void sleep() {
        System.out.println(this.name + " zzz in house");
    }

    void sleep(int hour) {
        System.out.println(this.name + " zzz in house for" + hour + "hours");
    }
}

public class Sample {
    public static void main(String[] args) {
        HouseDog happy = new HouseDog("happy");
        HouseDog yorkshire = new HouseDog(1);
        System.out.println(happy.name);
        System.out.println(yorkshire.name);
    }
}

위의 코드는 HouseDog 메서드를 2가지로 만들었다.

하나는 String 자료형으로 입력하는 생성자
다른 하나는 int자료형을 입력으로 받는 생성자로 다른 생성자를 여러 개 만드는 것이 바로 생성자 오버로딩이다.(메서드 오버로딩과 동일함)

인터페이스 & 다형성---------------------------------------------------------------------------------

class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Tiger extends Animal {
}

class Lion extends Animal {
}

class ZooKeeper {
    void feed(Tiger tiger) {  // 호랑이가 오면 사과를 던져 준다.
        System.out.println("feed apple");
    }

    void feed(Lion lion) {  // 사자가 오면 바나나를 던져준다.
        System.out.println("feed banana");
    }
}

public class Sample {
    public static void main(String[] args) {
        ZooKeeper zooKeeper = new ZooKeeper();
        Tiger tiger = new Tiger();
        Lion lion = new Lion();
        zooKeeper.feed(tiger);  // feed apple 출력
        zooKeeper.feed(lion);  // feed banana 출력
    }
}

위의 코드가 일반적 구조
interface Predator {
    void feed();
}

class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Tiger extends Animal implements Predator {
    @Override
    public void feed() {
        System.out.println("feed apple");
    }
}

class Lion extends Animal implements Predator {
    @Override
    public void feed() {
        System.out.println("feed banana");
    }
}

class ZooKeeper {
    void feed(Predator predator) {
        predator.feed();
    }
}

public class Sample {
    public static void main(String[] args) {
        ZooKeeper zooKeeper = new ZooKeeper();
        Tiger tiger = new Tiger();
        Lion lion = new Lion();

        zooKeeper.feed(tiger);
        zooKeeper.feed(lion);
    }
}

이 구조가 인터페이스를 이용하여 구조를 획기적으로 줄인 구조이다.

https://www.tcpschool.com/java/java_usingClass_package

제어자

자바에서 패키지를 선언하는 방법

package 패키지이름;

import 문의 선언

1.import 패키지이름.클래스이름;
2.import 패키지이름.*;

접근제어자는 4가지가 존재하며,
private public default protected 총 4가지가 존재한다.

private = 전부 직접 접근 불가
default = 다른 패키지(일반, 자식 클래스)에서 접근 불가능
protected = 일반 클래스는 접근 불가능
public = 전부 직접 접근 가능

접근 제어자	같은 클래스의 멤버	,같은 패키지의 멤버,	자식 클래스의 멤버,	그 외의 영역
public	○	○	○	○
protected	○	○	○	X
default	○	○	X	X
private	○	X	X	X

final 제어자

final은 수정/변경 할 수 없게 만드는 것이다.

abstract 제어자

선언부만 있고 구현부가 없는 메소드를 추상 메소드라 하며, 반드시 abstract제어자를 붙여야한다.

또한 하나 이상 추상 메소드가 포함된 추상 클래스도 abstract제어자를 붙여야한다.

클래스에 final과 abstract는 함께 사용할 수 없다.
final은 클래스간 상속이 불가능한데 abstract는 클래스간 상속으로 오버라이딩을 해야기에 불가능하다.

메소드에 static과 abstract는 함께 사용할 수 없다.
abstract는 선언부만 있고 구현부가 없는데 static은 인스턴스 생성없이 바로 사용할 수 있어야하기 때문

메소드에 private과 abstract는 함께 사용할 수 없다.
abstract는 다른 클래스가 상속에서 오버라이딩해야만 사용 가능한데 private 제어자를 가지는 메소드는
자식 클래스에 접근 못하기에 두 제어자는 메소드에 함께 사용할 수 없다.

메소드에 private과 final은 함께 사용할 필요가 없다.
final과 private 모두 오버라이딩을 통한 재정의를 할 수 없는 의미기에 하나만 사용해도 충분하다.

super() 메소드
https://www.tcpschool.com/java/java_inheritance_super
모르겠음....

오버로딩은 새로운 메소드 정의
오버라이딩은 상속받은 기존 메소드 재정의

절차지향과 객체지향의 관점에서 코딩 분석

this 메소드로 인스턴스 변수에 접근함.

-------------------------------------------------
부모 생성자 호출

부모 클래스에 생성자가 선언된 경우 super()를 통해 
부모의 생성자 중 하나를 반드시 호출해야한다.

ex)
public class ParentDog {
    String name;

    ParentDog(String name) {
        this.name = name;
    }

    ParentDog(String name1, String name2) {

    }
}

public class ChildDog extends ParentDog {
    ChildDog(String name) {
        super(name); // 부모 클래스의 ParentDog(String name)생성자 호출
    }
}

----------------------

추상화 클래스 상속 시 

public class Retriever extends Dog {
    public Retriever(String name) {
        super(name);  // 추상 클래스 생성자 호출
    }
super(인스턴스 변수)를 꼭 작성하고

인터페이스 구현 시

public class Retriever implements Dog {
    private String name;

    public Retriever(String name) {
        this.name = name;
    }

로 생성자를 꼭 작성해야 한다.

----------------------

익명 클래스
코드 내부에 이름이 존재하지 않는 클래스를 만드는 것

ex)

  Coffee coffee = new Coffee() {
            // make 메서드 오버라이드
            public void make() {
                System.out.println("Override Make!!");
            }
            // 새로운 메서드
            public void serve() {
                System.out.println("Serve");
            }
        }
}
에서 new Coffee() { ... } 전부 익명 클래스며
public void make()/serve()가 메서드 오버라이딩이다.

쉽게 말해서 클래스 객체 = new 클래스() 이 부분은
인스턴스 생성이자 익명 클래스 생성 구절이다.

익명 클래스를 쓰는 이유는 가독성과 흐름때문이고,
익명 클래스의 진정한 진가는 인터페이스에서 나타나는데,



